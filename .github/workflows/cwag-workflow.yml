name: cwag-precommit

on:
  push:
    branches:
      - benchmark
      - master
  pull_request:
    branches: [ benchmark ]

jobs:

########## CWAG-PRECOMMIT ##########

  cwag-precommit:

    runs-on: ubuntu-latest

    env:
      GO111MODULE: on

    steps:
    - uses: actions/checkout@v2
    - name: Export Magma root path
      run: echo "MAGMA_ROOT=${PWD}" >> $GITHUB_ENV
    - name: Run golang_before_install.sh script
      run: ./circleci/golang_before_install.sh
    - name: Run go
      run: |
          cd ${MAGMA_ROOT}/cwf/gateway
          go mod download
    - name: Run make
      run: |
          cd ${MAGMA_ROOT}/cwf/gateway
          make -C ${MAGMA_ROOT}/cwf/gateway precommit
          cd ${MAGMA_ROOT}/cwf/gateway
          make -C ${MAGMA_ROOT}/cwf/gateway/integ_tests precommit
#    - magma_slack_notify

########## CWF-INTEG-TEST ##########

  cwf-integ-test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup variables
      run: |
          echo "stack=cwf" >> $GITHUB_ENV
          echo "test=True" >> $GITHUB_ENV
          echo "build=False" >> $GITHUB_ENV
          echo "deploy=False" >> $GITHUB_ENV
    - name: Export Magma root path
      run: echo "MAGMA_ROOT=${PWD}" >> $GITHUB_ENV
    - name: Install tools
      run: |
            sudo apt-get update
            sudo apt-get install -y openvpn
    - name: Configure and start VPN client
      run: |
            echo $MAGMA_OVPN_CONF | base64 -d - > ciworker.conf
            sudo mv ciworker.conf /etc/openvpn/client.conf
            sudo service openvpn@client restart
    - name: Decode and set secrets
      run: |
            cd ${MAGMA_ROOT}/circleci
            echo $MAGMA_NODE_PKEY | base64 -d - > ci_node.pem
            chmod 0400 ci_node.pem
            echo $MAGMA_API_CERT | base64 -d - > ci_operator.pfx
            openssl pkcs12 -in ci_operator.pfx -nocerts -out ci_operator.key.pem -nodes -passin pass:
            openssl pkcs12 -in ci_operator.pfx -nokeys -out ci_operator.pem -passin pass:
            echo $MAGMA_ROOTCA | base64 -d - > rootCA.pem
            echo $MAGMA_CONTROL_PROXY | base64 -d - > control_proxy.yml
            echo export AWS_DEFAULT_REGION="us-east-1" >> $BASH_ENV
            echo export AWS_ACCESS_KEY_ID="$(printenv MAGMA_DEPLOY_AWS_ACCESS_KEY_ID)" >> $BASH_ENV
            echo export AWS_SECRET_ACCESS_KEY="$(printenv MAGMA_DEPLOY_AWS_SECRET_ACCESS_KEY)" >> $BASH_ENV
#      - python/set_version
    - name: Install python prerequisites
      run: pip3 install fabric3 jsonpickle requests PyYAML awscli
      # sleep 10 just in case the vpn client takes time to spin up
    - name: Run remote integ test
      run: |
            sleep 10
            cd ${MAGMA_ROOT}/circleci
            fab <<parameters.stack>> integ_test:repo=${CIRCLE_REPOSITORY_URL},branch=${CIRCLE_BRANCH},sha1=${CIRCLE_SHA1},run_integ_test=<<parameters.test>>,build_package=<<parameters.build>>,deploy_artifacts=<<parameters.deploy>>
            mkdir -p versions
            cp *_version versions || true
      timeout-minutes: 20
#      - store_artifacts:
#          path: /tmp/logs
#      - store_test_results:
#          path: /tmp/test-results
    - name: Double-check that the node is freed
      run: |
            cd ${MAGMA_ROOT}/circleci
            lease_id=$(cat lease_id.out)
            lease_node=$(cat lease_node.out)
            curl -X POST "https://api-staging.magma.etagecom.io/magma/v1/ci/nodes/${lease_node}/release/${lease_id}" -k --key ci_operator.key.pem --cert ci_operator.pem || true
      if: always()
#      - magma_slack_notify

########## XWFM-TEST ##########

  xwfm-test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup Environment Variables
      run: |
            echo "MAGMA_ROOT=${PWD}" >> $GITHUB_ENV
            echo "RUN_UID=${RANDOM}" >> $GITHUB_ENV
    - name: Build the docker-compose stack
      run: |
           cd ${MAGMA_ROOT}/xwf/docker/
           docker-compose up -d
    - name: Loading openvswitch kernel module
      run: sudo modprobe openvswitch
    - name: Run docker compose
      run: |
            env
            docker login -u ${XWF_ARTIFACTORY_USER} -p ${XWF_ARTIFACTORY_API_KEY} ${XWF_ARTIFACTORY_LINK}
            docker-compose pull || true
            docker-compose build --parallel && docker-compose up -d && docker exec tests pytest --log-cli-level=info code/tests.py
            #      - when:
            #condition: <<parameters.notify_magma_ci>>
            #steps: magma_slack_notify
            #- when:
            #condition: <<parameters.notify_xwfm_ci>>
            #steps:
            #- magma_slack_notify:
            #    channel: "#xwfm_ci"

########## CWAG-DEPLOY ##########

  cwag-deploy:

    needs: [cwag-precommit, cwf-integ-test]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Export Magma root path
      run: |
          echo "MAGMA_ROOT=${PWD}" >> $GITHUB_ENV
          echo "DOCKER_REGISTRY=cwf_" >> $GITHUB_ENV
#      - build/determinator:
#          <<: *cwf_build_verify
    - name: Build the docker-compose stack
      run: |
           docker-compose up -d
    - name: Build CWAG containers
      run: |
            cd ${MAGMA_ROOT}/cwf/gateway/docker
            docker-compose -f docker-compose.yml -f docker-compose.override.yml build --parallel
            #      - tag-push-docker:
            # project: cwf
            #images: <<parameters.images>>
            #tag: <<parameters.tag>>
            #registry: $DOCKER_MAGMA_REGISTRY
            #tag-latest: <<parameters.tag-latest>>
            #      - persist-githash-version:
            #file_prefix: cwag
#      - notify-magma:
#          artifact_name: CWAG
#          version_path: versions/cwag_version
#      - magma_slack_notify

########## XWFM-DEPLOY ##########

  xwfm-deploy-latest:

    needs: [cwag-deploy, cwf-integ-test]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Export Magma root path
      run: |
          echo "MAGMA_ROOT=${PWD}" >> $GITHUB_ENV
          echo "DOCKER_REGISTRY=cwf_" >> $GITHUB_ENV
          echo "tag-latest=true" >> $GITHUB_ENV
    - name: Build the docker-compose stack
      run: |
           docker-compose up -d

    - name: Build xwf go radius
      run: |
            cd ${MAGMA_ROOT}/feg
            docker build --build-arg BUILD_NUM=${CIRCLE_SHA1:0:8} --tag goradius -f radius/src/Dockerfile ./
            # - tag-push-docker:
            #images: 'goradius'
            #tag: <<parameters.tag>>
            #registry: $DOCKER_MAGMA_REGISTRY
            #tag-latest: <<parameters.tag-latest>>
    - name: Load openvswitch kernel module for xwf integ test
      run: sudo modprobe openvswitch
    - name: Build xwfm-integ-tests
      run: |
            cd ${MAGMA_ROOT}
            docker build --tag xwfm-integ-tests -f xwf/gateway/integ_tests/gw/Dockerfile ./
            # - tag-push-docker:
            #images: 'xwfm-integ-tests'
            #tag: <<parameters.tag>>
            #registry: $DOCKER_MAGMA_REGISTRY
            #tag-latest: <<parameters.tag-latest>>
          #      - magma_slack_notify
